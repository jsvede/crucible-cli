//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.03.15 at 10:57:54 PM MDT 
//


package com.loquatic.crucible.rest.api;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for state.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="state">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Draft"/>
 *     &lt;enumeration value="Approval"/>
 *     &lt;enumeration value="Review"/>
 *     &lt;enumeration value="Summarize"/>
 *     &lt;enumeration value="Closed"/>
 *     &lt;enumeration value="Dead"/>
 *     &lt;enumeration value="Rejected"/>
 *     &lt;enumeration value="Unknown"/>
 *     &lt;enumeration value="OpenSnippet"/>
 *     &lt;enumeration value="ClosedSnippet"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "state")
@XmlEnum
public enum State {

    @XmlEnumValue("Draft")
    Draft("Draft"),
    @XmlEnumValue("Approval")
    Approval("Approval"),
    @XmlEnumValue("Review")
    Review("Review"),
    @XmlEnumValue("Summarize")
    Summarize("Summarize"),
    @XmlEnumValue("Closed")
    Closed("Closed"),
    @XmlEnumValue("Dead")
    Dead("Dead"),
    @XmlEnumValue("Rejected")
    Rejected("Rejected"),
    @XmlEnumValue("Unknown")
    Unknown("Unknown"),
    @XmlEnumValue("OpenSnippet")
    OpenSnippet("OpenSnippet"),
    @XmlEnumValue("ClosedSnippet")
    ClosedSnipper("ClosedSnippet");
    private final String value;

    State(String v) {
        value = v;
    }

    public String value() {
        return value;
    }
    
    public String toString() {
    	return value ;
    }

    public static State fromValue(String v) {
        for (State c: State.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
